{"version":3,"file":"unit-factory.esm.js","sources":["../src/main.ts"],"sourcesContent":["export function parseValueUnitString(input: string | number): [number, string] {\r\n  let value: number\r\n  let unit: string\r\n\r\n  if(typeof input === 'string') {\r\n    input = input.trim()\r\n    const output = input.match(/^(?<value>(?:\\+|-)?\\d+(?:\\.\\d+)?(?:(?:e|E)(?:\\+|-)?\\d+)?) {0,1}(?<unit>[a-zA-Z]+)?$/)\r\n\r\n    if(!output || !output.groups)\r\n      throw new Error('Input is invalid')\r\n\r\n    value = parseFloat(output.groups.value)\r\n    unit = output.groups.unit ?? ''\r\n  } else {\r\n    value = input\r\n    unit = ''\r\n  }\r\n\r\n  if(isNaN(value))\r\n    throw new Error('Value is not a number')\r\n  if(!isFinite(value))\r\n    throw new Error('Value is infinite')\r\n\r\n  return [value, unit]\r\n}\r\n"],"names":["parseValueUnitString","input","value","unit","output"],"mappings":"AAAO,SAASA,EAAqBC,GAA0C;AACzE,MAAAC,GACAC;AAED,MAAA,OAAOF,KAAU,UAAU;AAC5B,IAAAA,IAAQA,EAAM;AACR,UAAAG,IAASH,EAAM,MAAM,qFAAqF;AAE7G,QAAA,CAACG,KAAU,CAACA,EAAO;AACd,YAAA,IAAI,MAAM,kBAAkB;AAE5B,IAAAF,IAAA,WAAWE,EAAO,OAAO,KAAK,GAC/BD,IAAAC,EAAO,OAAO,QAAQ;AAAA,EAAA;AAErB,IAAAF,IAAAD,GACDE,IAAA;AAGT,MAAG,MAAMD,CAAK;AACN,UAAA,IAAI,MAAM,uBAAuB;AACtC,MAAA,CAAC,SAASA,CAAK;AACV,UAAA,IAAI,MAAM,mBAAmB;AAE9B,SAAA,CAACA,GAAOC,CAAI;AACrB;"}