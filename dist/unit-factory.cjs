"use strict";var m=Object.defineProperty;var f=(e,t,s)=>t in e?m(e,t,{enumerable:!0,configurable:!0,writable:!0,value:s}):e[t]=s;var u=(e,t,s)=>f(e,typeof t!="symbol"?t+"":t,s);Object.defineProperty(exports,Symbol.toStringTag,{value:"Module"});function l(e){let t,s;if(typeof e=="string"){e=e.trim();const r=e.match(/^(?<value>(?:\+|-)?\d+(?:\.\d+)?(?:(?:e|E)(?:\+|-)?\d+)?) {0,1}(?<unit>[a-zA-Z]+)?$/);if(!r||!r.groups)throw new Error("Input is invalid");t=parseFloat(r.groups.value),s=r.groups.unit??""}else t=e,s="";if(isNaN(t))throw new Error("Value is not a number");if(!isFinite(t))throw new Error("Value is infinite");return[t,s]}function c(e){const t=e[0],s=e.reduce((r,n)=>([n.symbol,n.name].flat().forEach(o=>{r[o.toLowerCase()]=n}),r),{});return class a{constructor(n,o){u(this,"value");u(this,"unitConfig");this.value=n,o?this.unitConfig=s[o.toLowerCase()]:this.unitConfig=t}static from(n){const[o,i]=l(n);return new a(o,i)}get baseValue(){return this.value*this.unitConfig.factor}get symbol(){return typeof this.unitConfig.symbol=="string"?this.unitConfig.symbol:this.unitConfig.symbol[0]}get name(){return typeof this.unitConfig.name=="string"?this.unitConfig.name:this.unitConfig.name[0]}to(n){const o=s[n.toLowerCase()],i=this.baseValue/o.factor;return new a(i,n)}add(n){const o=(this.baseValue+n.baseValue)/this.unitConfig.factor;return new a(o,this.symbol)}subtract(n){const o=(this.baseValue-n.baseValue)/this.unitConfig.factor;return new a(o,this.symbol)}format(){return`${this.value}${this.symbol}`}clone(){return new a(this.value,this.symbol)}}}const h=c([{factor:1,symbol:"ms",name:"millisecond"},{factor:1e3,symbol:["s","sec"],name:"second"},{factor:6e4,symbol:["m","min"],name:"minute"},{factor:36e5,symbol:["h","hr"],name:"hour"},{factor:864e5,symbol:"d",name:"day"},{factor:6048e5,symbol:["w","wk"],name:"week"},{factor:26298e5,symbol:"mo",name:"month"},{factor:315576e5,symbol:["y","yr"],name:"year"}]);exports.Duration=h;exports.createUnitFactory=c;exports.parseValueUnitString=l;
//# sourceMappingURL=unit-factory.cjs.map
