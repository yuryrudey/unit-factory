{"version":3,"file":"unit-factory.cjs","sources":["../src/parser.ts","../src/factory.ts","../src/factories/duration.ts"],"sourcesContent":["export function parseValueUnitString(input: string | number): [number, string] {\r\n  let value: number\r\n  let unit: string\r\n\r\n  if(typeof input === 'string') {\r\n    input = input.trim()\r\n    const output = input.match(/^(?<value>(?:\\+|-)?\\d+(?:\\.\\d+)?(?:(?:e|E)(?:\\+|-)?\\d+)?) {0,1}(?<unit>[a-zA-Z]+)?$/)\r\n\r\n    if(!output || !output.groups)\r\n      throw new Error('Input is invalid')\r\n\r\n    value = parseFloat(output.groups.value)\r\n    unit = output.groups.unit ?? ''\r\n  } else {\r\n    value = input\r\n    unit = ''\r\n  }\r\n\r\n  if(isNaN(value))\r\n    throw new Error('Value is not a number')\r\n  if(!isFinite(value))\r\n    throw new Error('Value is infinite')\r\n\r\n  return [value, unit]\r\n}\r\n","import type { Flatten, UnitConfig, UnitFactory, UnitInstance } from './types'\r\nimport { parseValueUnitString } from './parser'\r\n\r\nexport function createUnitFactory<T extends UnitConfig>(unitConfigs: T[]) {\r\n  type UnitSymbol = Flatten<T['symbol']>\r\n  type UnitName = Flatten<T['name']>\r\n  type UnitIdentifier = UnitSymbol | UnitName\r\n\r\n  const fallbackUnitConfig = unitConfigs[0]\r\n  const unitConfigsMap = unitConfigs.reduce((map, unitConfig) => {\r\n    [unitConfig.symbol, unitConfig.name].flat().forEach((identifier) => {\r\n      map[identifier.toLowerCase() as Lowercase<UnitIdentifier>] = unitConfig\r\n    })\r\n    return map\r\n  }, {} as Record<Lowercase<UnitIdentifier>, T>)\r\n\r\n  return class Unit {\r\n    readonly value: number\r\n    private unitConfig: T\r\n\r\n    constructor(value: number, identifier?: UnitIdentifier) {\r\n      this.value = value\r\n      if(!identifier) {\r\n        this.unitConfig = fallbackUnitConfig\r\n      } else {\r\n        this.unitConfig = unitConfigsMap[identifier.toLowerCase() as Lowercase<UnitIdentifier>]\r\n      }\r\n    }\r\n\r\n    static from(input: string | number) {\r\n      const [value, identifier] = parseValueUnitString(input)\r\n      return new Unit(value, identifier as UnitIdentifier)\r\n    }\r\n\r\n    get baseValue() {\r\n      return this.value * this.unitConfig.factor\r\n    }\r\n\r\n    get symbol() {\r\n      return (typeof this.unitConfig.symbol === 'string' ?\r\n        this.unitConfig.symbol :\r\n        this.unitConfig.symbol[0]) as UnitSymbol\r\n    }\r\n\r\n    get name() {\r\n      return (typeof this.unitConfig.name === 'string' ?\r\n        this.unitConfig.name :\r\n        this.unitConfig.name[0]) as UnitName\r\n    }\r\n\r\n    to(identifier: UnitIdentifier) {\r\n      const outputUnitConfig = unitConfigsMap[identifier.toLowerCase() as Lowercase<UnitIdentifier>]\r\n      const outputValue = this.baseValue / outputUnitConfig.factor\r\n      return new Unit(outputValue, identifier)\r\n    }\r\n\r\n    add(operand: UnitInstance<UnitSymbol, UnitName, UnitIdentifier>) {\r\n      const resultValue = (this.baseValue + operand.baseValue) / this.unitConfig.factor\r\n      return new Unit(resultValue, this.symbol)\r\n    }\r\n\r\n    subtract(operand: UnitInstance<UnitSymbol, UnitName, UnitIdentifier>) {\r\n      const resultValue = (this.baseValue - operand.baseValue) / this.unitConfig.factor\r\n      return new Unit(resultValue, this.symbol)\r\n    }\r\n\r\n    format() {\r\n      return `${this.value}${this.symbol}`\r\n    }\r\n\r\n    clone() {\r\n      return new Unit(this.value, this.symbol)\r\n    }\r\n\r\n    toString() {\r\n      return this.format()\r\n    }\r\n\r\n    valueOf() {\r\n      return this.baseValue\r\n    }\r\n  } as UnitFactory<UnitSymbol, UnitName, UnitIdentifier>\r\n}\r\n","// import type { UnitConfig } from '../types'\r\nimport { createUnitFactory } from '../factory'\r\n\r\nexport const Duration = createUnitFactory([\r\n  { factor: 1, symbol: 'ms', name: 'millisecond' } as const, // satisfies UnitConfig\r\n  { factor: 1000, symbol: ['s', 'sec'], name: 'second' } as const,\r\n  { factor: 60000, symbol: ['m', 'min'], name: 'minute' } as const,\r\n  { factor: 3600000, symbol: ['h', 'hr'], name: 'hour' } as const,\r\n  { factor: 86400000, symbol: 'd', name: 'day' } as const,\r\n  { factor: 604800000, symbol: ['w', 'wk'], name: 'week' } as const,\r\n  { factor: 2629800000, symbol: 'mo', name: 'month' } as const,\r\n  { factor: 31557600000, symbol: ['y', 'yr'], name: 'year' } as const\r\n])\r\n"],"names":["parseValueUnitString","input","value","unit","output","createUnitFactory","unitConfigs","fallbackUnitConfig","unitConfigsMap","map","unitConfig","identifier","Unit","__publicField","outputUnitConfig","outputValue","operand","resultValue","Duration"],"mappings":"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"}