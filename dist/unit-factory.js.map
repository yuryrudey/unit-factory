{"version":3,"file":"unit-factory.js","sources":["../src/parser.ts","../src/factory.ts","../src/factories/duration.ts"],"sourcesContent":["export function parseValueUnitString(input: string | number): [number, string] {\r\n  let value: number\r\n  let unit: string\r\n\r\n  if(typeof input === 'string') {\r\n    input = input.trim()\r\n    const output = input.match(/^(?<value>(?:\\+|-)?\\d+(?:\\.\\d+)?(?:(?:e|E)(?:\\+|-)?\\d+)?) {0,1}(?<unit>[a-zA-Z]+)?$/)\r\n\r\n    if(!output || !output.groups)\r\n      throw new Error('Input is invalid')\r\n\r\n    value = parseFloat(output.groups.value)\r\n    unit = output.groups.unit ?? ''\r\n  } else {\r\n    value = input\r\n    unit = ''\r\n  }\r\n\r\n  if(isNaN(value))\r\n    throw new Error('Value is not a number')\r\n  if(!isFinite(value))\r\n    throw new Error('Value is infinite')\r\n\r\n  return [value, unit]\r\n}\r\n","import type { Flatten, UnitConfig, UnitFactory, UnitInstance } from './types'\r\nimport { parseValueUnitString } from './parser'\r\n\r\nexport function createUnitFactory<T extends UnitConfig>(unitConfigs: T[]) {\r\n  type UnitSymbol = Flatten<T['symbol']>\r\n  type UnitName = Flatten<T['name']>\r\n  type UnitIdentifier = UnitSymbol | UnitName\r\n\r\n  const fallbackUnitConfig = unitConfigs[0]\r\n  const unitConfigsMap = unitConfigs.reduce((map, unitConfig) => {\r\n    [unitConfig.symbol, unitConfig.name].flat().forEach((identifier) => {\r\n      map[identifier.toLowerCase() as Lowercase<UnitIdentifier>] = unitConfig\r\n    })\r\n    return map\r\n  }, {} as Record<Lowercase<UnitIdentifier>, T>)\r\n\r\n  return class Unit {\r\n    readonly value: number\r\n    private unitConfig: T\r\n\r\n    constructor(value: number, identifier?: UnitIdentifier) {\r\n      this.value = value\r\n      if(!identifier) {\r\n        this.unitConfig = fallbackUnitConfig\r\n      } else {\r\n        this.unitConfig = unitConfigsMap[identifier.toLowerCase() as Lowercase<UnitIdentifier>]\r\n      }\r\n    }\r\n\r\n    static from(input: string | number) {\r\n      const [value, identifier] = parseValueUnitString(input)\r\n      return new Unit(value, identifier as UnitIdentifier)\r\n    }\r\n\r\n    get baseValue() {\r\n      return this.value * this.unitConfig.factor\r\n    }\r\n\r\n    get symbol() {\r\n      return (typeof this.unitConfig.symbol === 'string' ?\r\n        this.unitConfig.symbol :\r\n        this.unitConfig.symbol[0]) as UnitSymbol\r\n    }\r\n\r\n    get name() {\r\n      return (typeof this.unitConfig.name === 'string' ?\r\n        this.unitConfig.name :\r\n        this.unitConfig.name[0]) as UnitName\r\n    }\r\n\r\n    to(identifier: UnitIdentifier) {\r\n      const outputUnitConfig = unitConfigsMap[identifier.toLowerCase() as Lowercase<UnitIdentifier>]\r\n      const outputValue = this.baseValue / outputUnitConfig.factor\r\n      return new Unit(outputValue, identifier)\r\n    }\r\n\r\n    add(operand: UnitInstance<UnitSymbol, UnitName, UnitIdentifier>) {\r\n      const resultValue = (this.baseValue + operand.baseValue) / this.unitConfig.factor\r\n      return new Unit(resultValue, this.symbol)\r\n    }\r\n\r\n    subtract(operand: UnitInstance<UnitSymbol, UnitName, UnitIdentifier>) {\r\n      const resultValue = (this.baseValue - operand.baseValue) / this.unitConfig.factor\r\n      return new Unit(resultValue, this.symbol)\r\n    }\r\n\r\n    format() {\r\n      return `${this.value}${this.symbol}`\r\n    }\r\n\r\n    clone() {\r\n      return new Unit(this.value, this.symbol)\r\n    }\r\n\r\n    toString() {\r\n      return this.format()\r\n    }\r\n\r\n    valueOf() {\r\n      return this.baseValue\r\n    }\r\n  } as UnitFactory<UnitSymbol, UnitName, UnitIdentifier>\r\n}\r\n","// import type { UnitConfig } from '../types'\r\nimport { createUnitFactory } from '../factory'\r\n\r\nexport const Duration = createUnitFactory([\r\n  { factor: 1, symbol: 'ms', name: 'millisecond' } as const, // satisfies UnitConfig\r\n  { factor: 1000, symbol: ['s', 'sec'], name: 'second' } as const,\r\n  { factor: 60000, symbol: ['m', 'min'], name: 'minute' } as const,\r\n  { factor: 3600000, symbol: ['h', 'hr'], name: 'hour' } as const,\r\n  { factor: 86400000, symbol: 'd', name: 'day' } as const,\r\n  { factor: 604800000, symbol: ['w', 'wk'], name: 'week' } as const,\r\n  { factor: 2629800000, symbol: 'mo', name: 'month' } as const,\r\n  { factor: 31557600000, symbol: ['y', 'yr'], name: 'year' } as const\r\n])\r\n"],"names":["parseValueUnitString","input","value","unit","output","createUnitFactory","unitConfigs","fallbackUnitConfig","unitConfigsMap","map","unitConfig","identifier","Unit","__publicField","outputUnitConfig","outputValue","operand","resultValue","Duration"],"mappings":"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"}